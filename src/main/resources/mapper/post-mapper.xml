<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "htttp://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.iqiu_backend.dao.PostMapper">

    <select id="selectHomePosts" resultType="com.example.iqiu_backend.vo.HomePostsVO">
        SELECT p.id AS postId,p.post_type AS postType,p.last_comment_time as lastCommentTime,
            c.id AS communityId, c.community_name AS communityName,c.avatar AS communityAvatar,
            c.follower_count AS followerCount, c.`posts_count` AS postsCount,p.title AS postTitle,
            p.content AS postContent, p.like_count AS likeCount,
            p.ball_type AS ballType, p.people_counts AS peopleCount ,p.location AS ballLocation
        FROM posts AS p
        LEFT JOIN community AS c
        ON p.community_id = c.id
        ORDER BY p.`id` desc
        LIMIT #{offset}, #{limit}
    </select>

    <select id="selectMyPosts" resultType="com.example.iqiu_backend.vo.MyPostsVO">
        select p.id AS postId,p.poster_id AS userId,p.post_type AS postType,p.`create_time` AS createTime,
            p.last_comment_time as lastCommentTime,p.community_id AS communityId ,
            p.title AS postTitle, p.content AS postContent, p.like_count AS likeCount,
            p.ball_type AS ballType, p.people_counts AS peopleCount ,p.location AS ballLocation,
            u.`username` AS userName, u.`avatar` AS userAvatar,
            c.community_name AS communityName, c.avatar AS communityAvatar
        from posts p,users u,community c
        where p.poster_id=#{userId} and p.`community_id`=c.`id` and p.`poster_id` =u.`id`
        ORDER BY p.`id` desc
        LIMIT #{offset},#{limit}

    </select>

    <select id="selectCommunityPosts" resultType="com.example.iqiu_backend.vo.CommunityPostsVO">
        select p.id AS postId,p.poster_id AS userId,p.post_type AS postType,p.`create_time` AS createTime,
        p.last_comment_time as lastCommentTime, p.title AS postTitle, p.content AS postContent,
        p.like_count AS likeCount, p.ball_type AS ballType, p.people_counts AS peopleCount ,
        p.location AS ballLocation, u.`username` AS userName, u.`avatar` AS userAvatar
        from posts p,users u,community c
        where p.`community_id`=#{communityId} and p.`community_id`=c.`id` and p.`poster_id` =u.`id`
        ORDER BY p.`id` desc
        LIMIT #{offset},#{limit}
    </select>

    <select id="selectCommunityIdByPostsId" resultType="int">
        select community_id
        from posts
        where id = #{postsId}
    </select>

    <insert id="insertPost" parameterType="com.example.iqiu_backend.entity.Posts" useGeneratedKeys="true" keyProperty="id">
        insert into posts
        (poster_id,title,content,post_type,create_time,community_id,like_count,like_users)
        value (#{posterId},#{title},#{content},#{postType},#{createTime},#{communityId},#{likeCount},#{likeUsers})
    </insert>

    <select id="selectPostDetail" parameterType="int" resultType="com.example.iqiu_backend.dto.PostDetailDTO">
        select pd.postId,pd.userId,pd.userName,pd.userAvatar,pd.createTime,pd.location,
            pd.communityId,pd.communityName,pd.communityAvatar,pd.followerCount,
            pd.postTitle,pd.postContent,pd.postType,
            pd.ballType,pd.peopleCount,pd.ballLocation,
            COUNT(pd.`commentId`) AS commentCount,
            CONCAT(
                '[',
                GROUP_CONCAT(
                    JSON_OBJECT(
                        'commentId',pd.`commentId`,'commentType',pd.`commentType`,
                        'commentUserId',pd.`commentUserId`,'commentUserName',u.`username`,
                        'commentUserAvatar',u.`avatar`,'commentLocation',u.`location`,
                        'commentContent',pd.`commentContent`,
                        'commentCreateTime',pd.`commentCreateTime`
                    )
                    SEPARATOR ','
                ),
                ']'
            ) AS `comment`
        from (
            SELECT pd.postId,pd.userId,pd.userName,pd.userAvatar,pd.createTime,pd.location,
                pd.communityId,pd.communityName,pd.communityAvatar,pd.followerCount,
                pd.postTitle,pd.postContent,pd.postType,
                pd.ballType,pd.peopleCount,pd.ballLocation,
                c.`id` AS commentId,c.`comment_type` AS commentType,c.`user_id` AS commentUserId,
                c.`content` AS commentContent,c.`create_time` AS commentCreateTime
            FROM(
                SELECT p.`id` AS postId,u.`id` AS userId,u.`username` AS userName,
                    u.`avatar` AS userAvatar, p.`create_time` AS createTime,
                    u.`location`,c.`id` AS communityId, c.`community_name` AS communityName,
                    c.`avatar` AS communityAvatar,c.`follower_count` AS followerCount,
                    p.`title` AS postTitle,p.`content` AS postContent,p.`post_type` AS postType,p.`ball_type` AS ballType,
                    p.`people_counts` AS peopleCount,p.`location` AS ballLocation
                FROM posts AS p,users AS u,community AS c
                WHERE p.`id`=#{postId} AND p.`poster_id`=u.`id` AND c.`id`=p.`community_id`
            ) pd
            LEFT JOIN `comment` c
            ON c.`post_id`=pd.postId
        ) pd
        left join `users` u
        on pd.commentUserId=u.`id`
        group by pd.`postId`
    </select>

</mapper>